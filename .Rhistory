return(final)
}
else{
tts <- c()
start <- c()
end <- c()
for (i in 1:nrow(x)){
tts <- gencode[gencode$gene_id == x[i, 1], 10]
chr <- gencode[gencode$gene_id == x[i, 1], 1]
if (tts <= 500000){start <- c(start, 1)}
else {start <- c(tts - 500000)}
if(tts + 500000 > chromosomes[chromosomes[,1]== chr, 2]){end <- c(end, chromosomes[chromosomes[,1]== chr, 2] )}
else{end <- c(end, tts +500000)}
}
genesdata <- as.data.frame(cbind(x[,1], start, end))
print(genesdata)
colnames(genesdata) <- c("seqnames", "start", "end")
genes_range <- GenomicRanges::makeGRangesFromDataFrame(genesdata)
}
}
example2 <- read.table("/project/CRUP_scores/Scripts/EPI/example2.txt", sep = "\t")
example2<- unfactorize(example2)
distances(example2)
cCREs_enhancer <- cCREs[cCREs$V6 %in% c("dELS", "pELS", "pELS,CTCF-bound", "dELS,CTCF-bound")]
cCREs_enhancer <- cCREs[cCREs$V6 %in% c("dELS", "pELS", "pELS,CTCF-bound", "dELS,CTCF-bound"),]
distances <- function(x){
### the id is the one with an E not a D
distances <- c()
if (ncol(x)==2){
for (i in 1:nrow(x)){
eldist<-  abs(cCREs[cCREs$V5 == x[i, 2], 11] - gencode[gencode$gene_id == x[i, 1], 10 ])
print(eldist)
distances <- c(distances, eldist)
}
final <- as.data.frame(cbind(x[,1], x[,2], distances))
return(final)
}
else{
tts <- c()
start <- c()
end <- c()
for (i in 1:nrow(x)){
tts <- gencode[gencode$gene_id == x[i, 1], 10]
chr <- gencode[gencode$gene_id == x[i, 1], 1]
if (tts <= 500000){start <- c(start, 1)}
else {start <- c(tts - 500000)}
if(tts + 500000 > chromosomes[chromosomes[,1]== chr, 2]){end <- c(end, chromosomes[chromosomes[,1]== chr, 2] )}
else{end <- c(end, tts +500000)}
}
genesdata <- as.data.frame(cbind(x[,1], start, end))
print(genesdata)
colnames(genesdata) <- c("seqnames", "start", "end")
genes_range <- GenomicRanges::makeGRangesFromDataFrame(genesdata)
enhancer_range <- GenomicRanges::makeGRangesFromDataFrame(cCREs_enhancer[,c("V5","V2", "V3")])
}
}
example2 <- read.table("/project/CRUP_scores/Scripts/EPI/example2.txt", sep = "\t")
example2<- unfactorize(example2)
distances(example2)
distances <- function(x){
### the id is the one with an E not a D
distances <- c()
if (ncol(x)==2){
for (i in 1:nrow(x)){
eldist<-  abs(cCREs[cCREs$V5 == x[i, 2], 11] - gencode[gencode$gene_id == x[i, 1], 10 ])
print(eldist)
distances <- c(distances, eldist)
}
final <- as.data.frame(cbind(x[,1], x[,2], distances))
return(final)
}
else{
tts <- c()
start <- c()
end <- c()
for (i in 1:nrow(x)){
tts <- gencode[gencode$gene_id == x[i, 1], 10]
chr <- gencode[gencode$gene_id == x[i, 1], 1]
if (tts <= 500000){start <- c(start, 1)}
else {start <- c(tts - 500000)}
if(tts + 500000 > chromosomes[chromosomes[,1]== chr, 2]){end <- c(end, chromosomes[chromosomes[,1]== chr, 2] )}
else{end <- c(end, tts +500000)}
}
genesdata <- as.data.frame(cbind(x[,1], start, end))
print(genesdata)
colnames(genesdata) <- c("seqnames", "start", "end")
genes_range <- GenomicRanges::makeGRangesFromDataFrame(genesdata)
enhancerdata <- cCREs_enhancer[,c("V5","V2", "V3")]
colnames(enhancerdata) <- c("seqnames", "start", "end")
enhancer_range <- GenomicRanges::makeGRangesFromDataFrame(cCREs_enhancer[,c("V5","V2", "V3")])
}
}
example2 <- read.table("/project/CRUP_scores/Scripts/EPI/example2.txt", sep = "\t")
example2<- unfactorize(example2)
distances(example2)
distances <- function(x){
### the id is the one with an E not a D
distances <- c()
if (ncol(x)==2){
for (i in 1:nrow(x)){
eldist<-  abs(cCREs[cCREs$V5 == x[i, 2], 11] - gencode[gencode$gene_id == x[i, 1], 10 ])
print(eldist)
distances <- c(distances, eldist)
}
final <- as.data.frame(cbind(x[,1], x[,2], distances))
return(final)
}
else{
tts <- c()
start <- c()
end <- c()
for (i in 1:nrow(x)){
tts <- gencode[gencode$gene_id == x[i, 1], 10]
chr <- gencode[gencode$gene_id == x[i, 1], 1]
if (tts <= 500000){start <- c(start, 1)}
else {start <- c(tts - 500000)}
if(tts + 500000 > chromosomes[chromosomes[,1]== chr, 2]){end <- c(end, chromosomes[chromosomes[,1]== chr, 2] )}
else{end <- c(end, tts +500000)}
}
genesdata <- as.data.frame(cbind(x[,1], start, end))
print(genesdata)
colnames(genesdata) <- c("seqnames", "start", "end")
genes_range <- GenomicRanges::makeGRangesFromDataFrame(genesdata)
enhancerdata <- cCREs_enhancer[,c("V5","V2", "V3")]
colnames(enhancerdata) <- c("seqnames", "start", "end")
enhancer_range <- GenomicRanges::makeGRangesFromDataFrame(enhancerdata)
}
}
example2 <- read.table("/project/CRUP_scores/Scripts/EPI/example2.txt", sep = "\t")
example2<- unfactorize(example2)
distances(example2)
distances <- function(x){
### the id is the one with an E not a D
distances <- c()
if (ncol(x)==2){
for (i in 1:nrow(x)){
eldist<-  abs(cCREs[cCREs$V5 == x[i, 2], 11] - gencode[gencode$gene_id == x[i, 1], 10 ])
print(eldist)
distances <- c(distances, eldist)
}
final <- as.data.frame(cbind(x[,1], x[,2], distances))
return(final)
}
else{
tts <- c()
start <- c()
end <- c()
for (i in 1:nrow(x)){
tts <- gencode[gencode$gene_id == x[i, 1], 10]
chr <- gencode[gencode$gene_id == x[i, 1], 1]
if (tts <= 500000){start <- c(start, 1)}
else {start <- c(tts - 500000)}
if(tts + 500000 > chromosomes[chromosomes[,1]== chr, 2]){end <- c(end, chromosomes[chromosomes[,1]== chr, 2] )}
else{end <- c(end, tts +500000)}
}
genesdata <- as.data.frame(cbind(x[,1], start, end))
print(genesdata)
colnames(genesdata) <- c("seqnames", "start", "end")
genes_range <- GenomicRanges::makeGRangesFromDataFrame(genesdata)
enhancerdata <- cCREs_enhancer[,c("V5","V2", "V3")]
colnames(enhancerdata) <- c("seqnames", "start", "end")
enhancer_range <- GenomicRanges::makeGRangesFromDataFrame(enhancerdata)
overlaps <- GenomicRanges::findOverlaps(enhancer_range, genes_range)
print(overlaps)
}
}
example2 <- read.table("/project/CRUP_scores/Scripts/EPI/example2.txt", sep = "\t")
example2<- unfactorize(example2)
distances(example2)
distances <- function(x){
### the id is the one with an E not a D
distances <- c()
if (ncol(x)==2){
for (i in 1:nrow(x)){
eldist<-  abs(cCREs[cCREs$V5 == x[i, 2], 11] - gencode[gencode$gene_id == x[i, 1], 10 ])
print(eldist)
distances <- c(distances, eldist)
}
final <- as.data.frame(cbind(x[,1], x[,2], distances))
return(final)
}
else{
tts <- c()
start <- c()
end <- c()
for (i in 1:nrow(x)){
tts <- gencode[gencode$gene_id == x[i, 1], 10]
chr <- gencode[gencode$gene_id == x[i, 1], 1]
if (tts <= 500000){start <- c(start, 1)}
else {start <- c(tts - 500000)}
if(tts + 500000 > chromosomes[chromosomes[,1]== chr, 2]){end <- c(end, chromosomes[chromosomes[,1]== chr, 2] )}
else{end <- c(end, tts +500000)}
}
genesdata <- as.data.frame(cbind(x[,1], start, end))
print(genesdata)
colnames(genesdata) <- c("seqnames", "start", "end")
genes_range <- GenomicRanges::makeGRangesFromDataFrame(genesdata)
print(genes_range)
enhancerdata <- cCREs_enhancer[,c("V5","V2", "V3")]
colnames(enhancerdata) <- c("seqnames", "start", "end")
enhancer_range <- GenomicRanges::makeGRangesFromDataFrame(enhancerdata)
overlaps <- GenomicRanges::findOverlaps(enhancer_range, genes_range)
print(enhancer_range)
print(overlaps)
}
}
example2 <- read.table("/project/CRUP_scores/Scripts/EPI/example2.txt", sep = "\t")
example2<- unfactorize(example2)
distances(example2)
distances <- function(x){
### the id is the one with an E not a D
distances <- c()
if (ncol(x)==2){
for (i in 1:nrow(x)){
eldist<-  abs(cCREs[cCREs$V5 == x[i, 2], 11] - gencode[gencode$gene_id == x[i, 1], 10 ])
print(eldist)
distances <- c(distances, eldist)
}
final <- as.data.frame(cbind(x[,1], x[,2], distances))
return(final)
}
else{
tts <- c()
start <- c()
end <- c()
for (i in 1:nrow(x)){
tts <- gencode[gencode$gene_id == x[i, 1], 10]
chr <- gencode[gencode$gene_id == x[i, 1], 1]
if (tts <= 500000){start <- c(start, 1)}
else {start <- c(tts - 500000)}
if(tts + 500000 > chromosomes[chromosomes[,1]== chr, 2]){end <- c(end, chromosomes[chromosomes[,1]== chr, 2] )}
else{end <- c(end, tts +500000)}
}
genesdata <- as.data.frame(cbind(x[,1], start, end))
print(genesdata)
colnames(genesdata) <- c("seqnames", "start", "end")
genes_range <- GenomicRanges::makeGRangesFromDataFrame(genesdata)
print(genes_range)
enhancerdata <- cCREs_enhancer[,c("V5","V2", "V3")]
colnames(enhancerdata) <- c("seqnames", "start", "end")
enhancer_range <- GenomicRanges::makeGRangesFromDataFrame(enhancerdata)
overlaps <- GenomicRanges::findOverlaps(genes_range,enhancer_range,)
print(enhancer_range)
print(overlaps)
}
}
example2 <- read.table("/project/CRUP_scores/Scripts/EPI/example2.txt", sep = "\t")
example2<- unfactorize(example2)
distances(example2)
install.packages("styler")
install.packages("lintr")
styler:::style_active_pkg()
library(devtools)
load_all()
options(
usethis.full_name = "Sara Lopez Ruiz de Vargas",
usethis.description = list(
`Authors@R` = 'person("Sara", "Lopez Ruiz de Vargas", email = "jane@example.com", role = c("aut", "cre"),
comment = c(ORCID = "YOUR-ORCID-ID"))',
License = "MIT + file LICENSE",
Version = "0.0.0.9000"
),
usethis.protocol  = "ssh"
)
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint_package()
lintr:::addin_lint()
use_r("genomic_distances")
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint_package()
lintr:::addin_lint()
load_all()
load_all()
exists("genomic_distance", where = globalenv(), inherits = FALSE)
check()
use_mit_license()
library(roxygen2)
document
document()
?distances
check()
lintr:::addin_lint()
?GenomicRanges::findOverlaps
check()
@importFrom GenomicRanges findOverlaps
devtools:document()
document()
check()
document()
check()
document()
check()
document()
check()
install()
document()
check()
install()
example1 <- read.table("/project/CRUP_scores/Scripts/EPI_v2/example1.txt", sep ="\t")
result <- EPI::distances(example1)
check()
install()
result <- EPI::distances(example1)
print(result)
example2 <- read.table("/project/CRUP_scores/Scripts/EPI_v2/example2.txt", sep ="\t")
result <- EPI::distances(example2)
result <- EPI::distances(example2)
check()
install()
result <- EPI::distances(example2)
check()
install()
result <- EPI::distances(example2)
head(result)
view(chromosomes)
chromosomes <- read.table("~/Documentos/EPI/inst/raw/bed_files_V38/GRCh38-cCREsV3_all500.bed", sep = "\t", header = T)
cCRE <- chromosomes
head(cCRE)
data(sysdata)
data(ccres)
library(devtools)
library(roxygen2)
load_all()
data(ccres)
data(sysdata)
data(sysdata.rda)
gencode <- read.table("~/Documentos/EPI/inst/raw/bed_files_V38/gencode_v38.one.transcript.bed", sep = "\t", header = T)
gencode <- read.table("~/Documentos/EPI_v2/bed_files_V38/gencode_v38.one.transcript.bed", sep = "\t", header = T)
chromosomes <- read.table("~/Documentos/EPI_v2/chromosomes.txt", sep = "\t", header = T)
head(chromosomes)
chromosomes <- read.table("~/Documentos/EPI_v2/chromosomes.txt", sep = "\t", header = F)
head(chromosomes)
save(chromosomes, file= "R/chromosomes.rda", internal = T)
save(cCRE, file= "R/ccres.rda", internal = T)
save(gencode, file= "R/gencode.rda", internal = T)
data(gencode)
data(gencode.rda)
load_all()
data(gencode)
data(gencode.rdA)
save(gencode, file= "R/gencode.rda")
save(cCRE, file= "R/ccres.rda")
save(chromosomes, file= "R/chromosomes.rda")
load_all()
data(gencode.rda)
data(EPI/R/gencode.rda)
check()
load(sysdata.rda)
load(sysdata)
setwd("~/Docuem")
setwd("~/Documentos/EPI/R")
load(sysdaya)
load(sysdata)
load(sysdata.rda)
load("sysdata.rda")
check()
install()
library(EPI)
EPI::distances("~/Documentos/EPI_v2/example1.txt")
.rs.restartR()
library(EPI)
EPI::distances("~/Documentos/EPI_v2/example1.txt")
read.table("~/Documentos/EPI_v2/example1.txt", sep = "\t")
example1 <- read.table("~/Documentos/EPI_v2/example1.txt", sep = "\t")
EPI::distances(example1)
example2 <- read.table("~/Documentos/EPI_v2/example2.txt", sep = "\t")
EPI::distances(example2)
proj_sitrep()
`setwd(rstudioapi::getActiveProject())`
setwd(rstudioapi::getActiveProject())
proj_sitrep()
usethis::use_rstudio()
proj_sitrep()
usethis::use_testthat()
load_all()
library(EPI)
example1 <- read.table("~/Documentos/EPI_v2/example1.txt", sep = "\t")
distances(example1)
load('sysdata.rda')
load("R/sysdata.rda")
distances(example1)
load_all()
library(EPI)
distances(example1)
.rs.restartR()
load("sysdata.rda")
load("R/sysdata.rda")
setwd(rstudioapi::getActiveProject())
?expect_match
?stopifnot
example1 <- read.table("~/Documentos/EPI_v2/example2.txt")
distances(example1)
load_all()
library(devtools)
load_all()
library(EPI)
distances(example1)
distances(example1)
str(EPI::gencode)
load_all()
library(EPI)
distances(example1)
result <- distances(example1)
write.table(result, "~/Documentos/EPI/test/testthat/result2_test_genomic_distances.txt", sep = "\t", row.names = F)
write.table(result, "~/Documentos/EPI/tests/testthat/result2_test_genomic_distances.txt", sep = "\t", row.names = F)
test()
library(devtools)
load_all()
test()
example1 <- read.table("~/Documentos/EPI_v2/example1.txt")
example2 <- read.table("~/Documentos/EPI_v2/example2.txt")
library(EPI)
distances(example1)
distances(example2)
load_all()
library(devtools)
library(crupR)
load_all("~/Documentos/EPI/")
library(EPI)
example1 <- read.table("~/Documentos/EPI_v2/example1.txt")
files <- c("~/Documentos/A549/H3K4me1/H3K4me1.bam", "~/Documentos/A549/H3K4me3/H3K4me3.bam",  "~/Documentos/A549/H3K27ac/H3K27ac.bam")
inp <- "~/Documentos/A549/Controls/input.bam"
?crupR::normalize
metaData <- data.frame(HM = rep(c('H3K4me1','H3K4me3','H3K27ac'),2),
condition = c(1,1,1,2,2,2), replicate = c(1,1,1,1,1,1),
bamFile = files, inputFile = inp)
metaData <- data.frame(HM = c('H3K4me1','H3K4me3','H3K27ac'),
condition = c(1,1,1), replicate = c(1,1,1),
bamFile = files, inputFile = inp)
EPI::compute_crup(ex)
EPI::compute_crup(example1, metaData, 1)
load_all(EPI)
load_all("~/Documents/EPI")
load_all()
test()
ccres[ccres$V5 == x[i, 2], 1]
library(EPI)
ccres[ccres$V5 == example1[i, 2], 1]
ccres[ccres$V5 == example1[1, 2], 1]
gencode[gencode$gene_id == example1[1, 1], 1]
ccres[ccres$V5 == example1[1, 2], 1] == gencode[gencode$gene_id == example1[1, 1], 1]
ccres[ccres$V5 == example1[1, 2], 1] != gencode[gencode$gene_id == example1[1, 1], 1]
example <- as.data.frame(c("ENSG00000286832.1", "EH38E2776520"))
distances(example)
example
example <- as.data.frame(cbind("ENSG00000286832.1", "EH38E2776520"))
distances(example)
load_all()
test()
library(devtools)
load_all()
library(crupR)
check()
library(EPI)
test()
check()
library(roxygen2)
check()
load_all()
library(devtools)
library(crupR)
input <- read.table("~/Documentos/EPI_v2/example1.txt")
files <- c("/home/saralrv/Documentos/A549/H3K4me1/H3K4me1.bam", "/home/saralrv/Documentos/A549/H3K4me3/H3K4me3.bam", "/home/saralrv/Documentos/A549/H3K27ac/H3K27ac.bam")
inp <- "/home/saralrv/Documentos/A549/Controls/input.bam"
?normalize
metaData <- data.frame(HM = c('H3K4me1','H3K4me3','H3K27ac'),
condition = c(1,1,1), replicate = c(1,1,1),
bamFile = files, inputFile = rep(inp, 3)
)
metaData
load_all()
library(EPI)
compute_crup_EP_promoter(input, metaData, 1)
load_all()
gc()
library(EPI)
compute_crup_EP_promoter(input, metaData, 1)
gc()
input
load_all()
library(EPI)
compute_crup_EP_promoter(input, metaData, 1)
files <- c("/home/saralrv/Documentos/A549/H3K4me1/H3K4me1.bam", "/home/saralrv/Documentos/A549/H3K4me3/H3K4me3.bam", "/home/saralrv/Documentos/A549/H3K27ac/H3K27ac.bam")
inp <- "/home/saralrv/Documentos/A549/Controls/input.bam"
metaData <- data.frame(HM = c('H3K4me1','H3K4me3','H3K27ac'),
condition = c(1,1,1), replicate = c(1,1,1),
bamFile = files, inputFile = rep(inp, 3)
)
metaData
input <- read.table("~/Documentos/EPI_v2/example1.txt")
compute_crup_EP_promoter(input, metaData, 1)
gc()
compute_crup_EP_promoter(input, metaData, 1)
gc()
library(devtools)
input <- read.table("~/Documentos/EPI_v2/example1.txt")
library(crupR)
files <- c("/home/saralrv/Documentos/A549/H3K4me1/H3K4me1.bam", "/home/saralrv/Documentos/A549/H3K4me3/H3K4me3.bam", "/home/saralrv/Documentos/A549/H3K27ac/H3K27ac.bam")
inp <- "/home/saralrv/Documentos/A549/Controls/input.bam"
metaData <- data.frame(HM = c('H3K4me1','H3K4me3','H3K27ac'),
condition = c(1,1,1), replicate = c(1,1,1),
bamFile = files, inputFile = rep(inp, 3))
gc()
load_all()
library(EPI)
compute_crup_EP_promoter(input, metaData, 1)
gc()
gc()
load_all()
