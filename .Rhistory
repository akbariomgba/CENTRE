else {start <- c(tts - 500000)}
if(tts + 500000 > chromosomes[chromosomes[,1]== chr, 2]){end <- c(end, chromosomes[chromosomes[,1]== chr, 2] )}
else{end <- c(end, tts +500000)}
}
genesdata <- as.data.frame(cbind(x[,1], start, end))
colnames(genesdata) <- c("seqnames", "start", "end")
genes_range <- GenomicRanges::makeGRangesFromDataFrame(genesdata)
}
}
example2 <- read.table("/project/CRUP_scores/Scripts/EPI/example2.txt", sep = "\t")
distances(example2)
distances <- function(x){
### the id is the one with an E not a D
distances <- c()
if (ncol(x)==2){
for (i in 1:nrow(x)){
eldist<-  abs(cCREs[cCREs$V5 == x[i, 2], 11] - gencode[gencode$gene_id == x[i, 1], 10 ])
print(eldist)
distances <- c(distances, eldist)
}
final <- as.data.frame(cbind(x[,1], x[,2], distances))
return(final)
}
else{
tts <- c()
start <- c()
end <- c()
for (i in 1:nrow(x)){
tts <- gencode[gencode$gene_id == x[i, 1], 10]
chr <- gencode[gencode$gene_id == x[i, 1], 1]
if (tts <= 500000){start <- c(start, 1)}
else {start <- c(tts - 500000)}
if(tts + 500000 > chromosomes[chromosomes[,1]== chr, 2]){end <- c(end, chromosomes[chromosomes[,1]== chr, 2] )}
else{end <- c(end, tts +500000)}
}
genesdata <- as.data.frame(cbind(x[,1], start, end))
colnames(genesdata) <- c("seqnames", "start", "end")
genes_range <- GenomicRanges::makeGRangesFromDataFrame(genesdata)
}
}
example2 <- read.table("/project/CRUP_scores/Scripts/EPI/example2.txt", sep = "\t")
distances(example2)
gencode <- unfactorize(gencode)
chromosomes <- unfactorize(chromosomes)
distances <- function(x){
### the id is the one with an E not a D
distances <- c()
if (ncol(x)==2){
for (i in 1:nrow(x)){
eldist<-  abs(cCREs[cCREs$V5 == x[i, 2], 11] - gencode[gencode$gene_id == x[i, 1], 10 ])
print(eldist)
distances <- c(distances, eldist)
}
final <- as.data.frame(cbind(x[,1], x[,2], distances))
return(final)
}
else{
tts <- c()
start <- c()
end <- c()
for (i in 1:nrow(x)){
tts <- gencode[gencode$gene_id == x[i, 1], 10]
chr <- gencode[gencode$gene_id == x[i, 1], 1]
if (tts <= 500000){start <- c(start, 1)}
else {start <- c(tts - 500000)}
if(tts + 500000 > chromosomes[chromosomes[,1]== chr, 2]){end <- c(end, chromosomes[chromosomes[,1]== chr, 2] )}
else{end <- c(end, tts +500000)}
}
genesdata <- as.data.frame(cbind(x[,1], start, end))
colnames(genesdata) <- c("seqnames", "start", "end")
genes_range <- GenomicRanges::makeGRangesFromDataFrame(genesdata)
}
}
example2 <- read.table("/project/CRUP_scores/Scripts/EPI/example2.txt", sep = "\t")
distances(example2)
distances <- function(x){
### the id is the one with an E not a D
distances <- c()
if (ncol(x)==2){
for (i in 1:nrow(x)){
eldist<-  abs(cCREs[cCREs$V5 == x[i, 2], 11] - gencode[gencode$gene_id == x[i, 1], 10 ])
print(eldist)
distances <- c(distances, eldist)
}
final <- as.data.frame(cbind(x[,1], x[,2], distances))
return(final)
}
else{
tts <- c()
start <- c()
end <- c()
for (i in 1:nrow(x)){
tts <- gencode[gencode$gene_id == x[i, 1], 10]
chr <- gencode[gencode$gene_id == x[i, 1], 1]
if (tts <= 500000){start <- c(start, 1)}
else {start <- c(tts - 500000)}
if(tts + 500000 > chromosomes[chromosomes[,1]== chr, 2]){end <- c(end, chromosomes[chromosomes[,1]== chr, 2] )}
else{end <- c(end, tts +500000)}
}
genesdata <- as.data.frame(cbind(x[,1], start, end))
print(genesdata)
colnames(genesdata) <- c("seqnames", "start", "end")
genes_range <- GenomicRanges::makeGRangesFromDataFrame(genesdata)
}
}
example2 <- read.table("/project/CRUP_scores/Scripts/EPI/example2.txt", sep = "\t")
distances(example2)
example2 <- read.table("/project/CRUP_scores/Scripts/EPI/example2.txt", sep = "\t")
example2<- unfactorize(example2)
distances(example2)
chromosomes <- read.table("/project/CRUP_scores/Scripts/EPI/chromosomes.txt", sep = "\t", dec=",")
distances <- function(x){
### the id is the one with an E not a D
distances <- c()
if (ncol(x)==2){
for (i in 1:nrow(x)){
eldist<-  abs(cCREs[cCREs$V5 == x[i, 2], 11] - gencode[gencode$gene_id == x[i, 1], 10 ])
print(eldist)
distances <- c(distances, eldist)
}
final <- as.data.frame(cbind(x[,1], x[,2], distances))
return(final)
}
else{
tts <- c()
start <- c()
end <- c()
for (i in 1:nrow(x)){
tts <- gencode[gencode$gene_id == x[i, 1], 10]
chr <- gencode[gencode$gene_id == x[i, 1], 1]
if (tts <= 500000){start <- c(start, 1)}
else {start <- c(tts - 500000)}
if(tts + 500000 > chromosomes[chromosomes[,1]== chr, 2]){end <- c(end, chromosomes[chromosomes[,1]== chr, 2] )}
else{end <- c(end, tts +500000)}
}
genesdata <- as.data.frame(cbind(x[,1], start, end))
print(genesdata)
colnames(genesdata) <- c("seqnames", "start", "end")
genes_range <- GenomicRanges::makeGRangesFromDataFrame(genesdata)
}
}
example2 <- read.table("/project/CRUP_scores/Scripts/EPI/example2.txt", sep = "\t")
example2<- unfactorize(example2)
distances(example2)
cCREs <- unfactorize(cCREs)
gencode <- unfactorize(gencode)
chromosomes <- unfactorize(chromosomes)
distances <- function(x){
### the id is the one with an E not a D
distances <- c()
if (ncol(x)==2){
for (i in 1:nrow(x)){
eldist<-  abs(cCREs[cCREs$V5 == x[i, 2], 11] - gencode[gencode$gene_id == x[i, 1], 10 ])
print(eldist)
distances <- c(distances, eldist)
}
final <- as.data.frame(cbind(x[,1], x[,2], distances))
return(final)
}
else{
tts <- c()
start <- c()
end <- c()
for (i in 1:nrow(x)){
tts <- gencode[gencode$gene_id == x[i, 1], 10]
chr <- gencode[gencode$gene_id == x[i, 1], 1]
if (tts <= 500000){start <- c(start, 1)}
else {start <- c(tts - 500000)}
if(tts + 500000 > chromosomes[chromosomes[,1]== chr, 2]){end <- c(end, chromosomes[chromosomes[,1]== chr, 2] )}
else{end <- c(end, tts +500000)}
}
genesdata <- as.data.frame(cbind(x[,1], start, end))
print(genesdata)
colnames(genesdata) <- c("seqnames", "start", "end")
genes_range <- GenomicRanges::makeGRangesFromDataFrame(genesdata)
}
}
example2 <- read.table("/project/CRUP_scores/Scripts/EPI/example2.txt", sep = "\t")
example2<- unfactorize(example2)
distances(example2)
View(chromosomes)
str(chromosomes)
?read.table
chromosomes <- read.table("/project/CRUP_scores/Scripts/EPI/chromosomes.txt", sep = "\t")
chromosomes <- unfactorize(chromosomes)
distances <- function(x){
### the id is the one with an E not a D
distances <- c()
if (ncol(x)==2){
for (i in 1:nrow(x)){
eldist<-  abs(cCREs[cCREs$V5 == x[i, 2], 11] - gencode[gencode$gene_id == x[i, 1], 10 ])
print(eldist)
distances <- c(distances, eldist)
}
final <- as.data.frame(cbind(x[,1], x[,2], distances))
return(final)
}
else{
tts <- c()
start <- c()
end <- c()
for (i in 1:nrow(x)){
tts <- gencode[gencode$gene_id == x[i, 1], 10]
chr <- gencode[gencode$gene_id == x[i, 1], 1]
if (tts <= 500000){start <- c(start, 1)}
else {start <- c(tts - 500000)}
if(tts + 500000 > chromosomes[chromosomes[,1]== chr, 2]){end <- c(end, chromosomes[chromosomes[,1]== chr, 2] )}
else{end <- c(end, tts +500000)}
}
genesdata <- as.data.frame(cbind(x[,1], start, end))
print(genesdata)
colnames(genesdata) <- c("seqnames", "start", "end")
genes_range <- GenomicRanges::makeGRangesFromDataFrame(genesdata)
}
}
example2 <- read.table("/project/CRUP_scores/Scripts/EPI/example2.txt", sep = "\t")
example2<- unfactorize(example2)
distances(example2)
cCREs_enhancer <- cCREs[cCREs$V6 %in% c("dELS", "pELS", "pELS,CTCF-bound", "dELS,CTCF-bound")]
cCREs_enhancer <- cCREs[cCREs$V6 %in% c("dELS", "pELS", "pELS,CTCF-bound", "dELS,CTCF-bound"),]
distances <- function(x){
### the id is the one with an E not a D
distances <- c()
if (ncol(x)==2){
for (i in 1:nrow(x)){
eldist<-  abs(cCREs[cCREs$V5 == x[i, 2], 11] - gencode[gencode$gene_id == x[i, 1], 10 ])
print(eldist)
distances <- c(distances, eldist)
}
final <- as.data.frame(cbind(x[,1], x[,2], distances))
return(final)
}
else{
tts <- c()
start <- c()
end <- c()
for (i in 1:nrow(x)){
tts <- gencode[gencode$gene_id == x[i, 1], 10]
chr <- gencode[gencode$gene_id == x[i, 1], 1]
if (tts <= 500000){start <- c(start, 1)}
else {start <- c(tts - 500000)}
if(tts + 500000 > chromosomes[chromosomes[,1]== chr, 2]){end <- c(end, chromosomes[chromosomes[,1]== chr, 2] )}
else{end <- c(end, tts +500000)}
}
genesdata <- as.data.frame(cbind(x[,1], start, end))
print(genesdata)
colnames(genesdata) <- c("seqnames", "start", "end")
genes_range <- GenomicRanges::makeGRangesFromDataFrame(genesdata)
enhancer_range <- GenomicRanges::makeGRangesFromDataFrame(cCREs_enhancer[,c("V5","V2", "V3")])
}
}
example2 <- read.table("/project/CRUP_scores/Scripts/EPI/example2.txt", sep = "\t")
example2<- unfactorize(example2)
distances(example2)
distances <- function(x){
### the id is the one with an E not a D
distances <- c()
if (ncol(x)==2){
for (i in 1:nrow(x)){
eldist<-  abs(cCREs[cCREs$V5 == x[i, 2], 11] - gencode[gencode$gene_id == x[i, 1], 10 ])
print(eldist)
distances <- c(distances, eldist)
}
final <- as.data.frame(cbind(x[,1], x[,2], distances))
return(final)
}
else{
tts <- c()
start <- c()
end <- c()
for (i in 1:nrow(x)){
tts <- gencode[gencode$gene_id == x[i, 1], 10]
chr <- gencode[gencode$gene_id == x[i, 1], 1]
if (tts <= 500000){start <- c(start, 1)}
else {start <- c(tts - 500000)}
if(tts + 500000 > chromosomes[chromosomes[,1]== chr, 2]){end <- c(end, chromosomes[chromosomes[,1]== chr, 2] )}
else{end <- c(end, tts +500000)}
}
genesdata <- as.data.frame(cbind(x[,1], start, end))
print(genesdata)
colnames(genesdata) <- c("seqnames", "start", "end")
genes_range <- GenomicRanges::makeGRangesFromDataFrame(genesdata)
enhancerdata <- cCREs_enhancer[,c("V5","V2", "V3")]
colnames(enhancerdata) <- c("seqnames", "start", "end")
enhancer_range <- GenomicRanges::makeGRangesFromDataFrame(cCREs_enhancer[,c("V5","V2", "V3")])
}
}
example2 <- read.table("/project/CRUP_scores/Scripts/EPI/example2.txt", sep = "\t")
example2<- unfactorize(example2)
distances(example2)
distances <- function(x){
### the id is the one with an E not a D
distances <- c()
if (ncol(x)==2){
for (i in 1:nrow(x)){
eldist<-  abs(cCREs[cCREs$V5 == x[i, 2], 11] - gencode[gencode$gene_id == x[i, 1], 10 ])
print(eldist)
distances <- c(distances, eldist)
}
final <- as.data.frame(cbind(x[,1], x[,2], distances))
return(final)
}
else{
tts <- c()
start <- c()
end <- c()
for (i in 1:nrow(x)){
tts <- gencode[gencode$gene_id == x[i, 1], 10]
chr <- gencode[gencode$gene_id == x[i, 1], 1]
if (tts <= 500000){start <- c(start, 1)}
else {start <- c(tts - 500000)}
if(tts + 500000 > chromosomes[chromosomes[,1]== chr, 2]){end <- c(end, chromosomes[chromosomes[,1]== chr, 2] )}
else{end <- c(end, tts +500000)}
}
genesdata <- as.data.frame(cbind(x[,1], start, end))
print(genesdata)
colnames(genesdata) <- c("seqnames", "start", "end")
genes_range <- GenomicRanges::makeGRangesFromDataFrame(genesdata)
enhancerdata <- cCREs_enhancer[,c("V5","V2", "V3")]
colnames(enhancerdata) <- c("seqnames", "start", "end")
enhancer_range <- GenomicRanges::makeGRangesFromDataFrame(enhancerdata)
}
}
example2 <- read.table("/project/CRUP_scores/Scripts/EPI/example2.txt", sep = "\t")
example2<- unfactorize(example2)
distances(example2)
distances <- function(x){
### the id is the one with an E not a D
distances <- c()
if (ncol(x)==2){
for (i in 1:nrow(x)){
eldist<-  abs(cCREs[cCREs$V5 == x[i, 2], 11] - gencode[gencode$gene_id == x[i, 1], 10 ])
print(eldist)
distances <- c(distances, eldist)
}
final <- as.data.frame(cbind(x[,1], x[,2], distances))
return(final)
}
else{
tts <- c()
start <- c()
end <- c()
for (i in 1:nrow(x)){
tts <- gencode[gencode$gene_id == x[i, 1], 10]
chr <- gencode[gencode$gene_id == x[i, 1], 1]
if (tts <= 500000){start <- c(start, 1)}
else {start <- c(tts - 500000)}
if(tts + 500000 > chromosomes[chromosomes[,1]== chr, 2]){end <- c(end, chromosomes[chromosomes[,1]== chr, 2] )}
else{end <- c(end, tts +500000)}
}
genesdata <- as.data.frame(cbind(x[,1], start, end))
print(genesdata)
colnames(genesdata) <- c("seqnames", "start", "end")
genes_range <- GenomicRanges::makeGRangesFromDataFrame(genesdata)
enhancerdata <- cCREs_enhancer[,c("V5","V2", "V3")]
colnames(enhancerdata) <- c("seqnames", "start", "end")
enhancer_range <- GenomicRanges::makeGRangesFromDataFrame(enhancerdata)
overlaps <- GenomicRanges::findOverlaps(enhancer_range, genes_range)
print(overlaps)
}
}
example2 <- read.table("/project/CRUP_scores/Scripts/EPI/example2.txt", sep = "\t")
example2<- unfactorize(example2)
distances(example2)
distances <- function(x){
### the id is the one with an E not a D
distances <- c()
if (ncol(x)==2){
for (i in 1:nrow(x)){
eldist<-  abs(cCREs[cCREs$V5 == x[i, 2], 11] - gencode[gencode$gene_id == x[i, 1], 10 ])
print(eldist)
distances <- c(distances, eldist)
}
final <- as.data.frame(cbind(x[,1], x[,2], distances))
return(final)
}
else{
tts <- c()
start <- c()
end <- c()
for (i in 1:nrow(x)){
tts <- gencode[gencode$gene_id == x[i, 1], 10]
chr <- gencode[gencode$gene_id == x[i, 1], 1]
if (tts <= 500000){start <- c(start, 1)}
else {start <- c(tts - 500000)}
if(tts + 500000 > chromosomes[chromosomes[,1]== chr, 2]){end <- c(end, chromosomes[chromosomes[,1]== chr, 2] )}
else{end <- c(end, tts +500000)}
}
genesdata <- as.data.frame(cbind(x[,1], start, end))
print(genesdata)
colnames(genesdata) <- c("seqnames", "start", "end")
genes_range <- GenomicRanges::makeGRangesFromDataFrame(genesdata)
print(genes_range)
enhancerdata <- cCREs_enhancer[,c("V5","V2", "V3")]
colnames(enhancerdata) <- c("seqnames", "start", "end")
enhancer_range <- GenomicRanges::makeGRangesFromDataFrame(enhancerdata)
overlaps <- GenomicRanges::findOverlaps(enhancer_range, genes_range)
print(enhancer_range)
print(overlaps)
}
}
example2 <- read.table("/project/CRUP_scores/Scripts/EPI/example2.txt", sep = "\t")
example2<- unfactorize(example2)
distances(example2)
distances <- function(x){
### the id is the one with an E not a D
distances <- c()
if (ncol(x)==2){
for (i in 1:nrow(x)){
eldist<-  abs(cCREs[cCREs$V5 == x[i, 2], 11] - gencode[gencode$gene_id == x[i, 1], 10 ])
print(eldist)
distances <- c(distances, eldist)
}
final <- as.data.frame(cbind(x[,1], x[,2], distances))
return(final)
}
else{
tts <- c()
start <- c()
end <- c()
for (i in 1:nrow(x)){
tts <- gencode[gencode$gene_id == x[i, 1], 10]
chr <- gencode[gencode$gene_id == x[i, 1], 1]
if (tts <= 500000){start <- c(start, 1)}
else {start <- c(tts - 500000)}
if(tts + 500000 > chromosomes[chromosomes[,1]== chr, 2]){end <- c(end, chromosomes[chromosomes[,1]== chr, 2] )}
else{end <- c(end, tts +500000)}
}
genesdata <- as.data.frame(cbind(x[,1], start, end))
print(genesdata)
colnames(genesdata) <- c("seqnames", "start", "end")
genes_range <- GenomicRanges::makeGRangesFromDataFrame(genesdata)
print(genes_range)
enhancerdata <- cCREs_enhancer[,c("V5","V2", "V3")]
colnames(enhancerdata) <- c("seqnames", "start", "end")
enhancer_range <- GenomicRanges::makeGRangesFromDataFrame(enhancerdata)
overlaps <- GenomicRanges::findOverlaps(genes_range,enhancer_range,)
print(enhancer_range)
print(overlaps)
}
}
example2 <- read.table("/project/CRUP_scores/Scripts/EPI/example2.txt", sep = "\t")
example2<- unfactorize(example2)
distances(example2)
install.packages("styler")
install.packages("lintr")
styler:::style_active_pkg()
library(devtools)
load_all()
options(
usethis.full_name = "Sara Lopez Ruiz de Vargas",
usethis.description = list(
`Authors@R` = 'person("Sara", "Lopez Ruiz de Vargas", email = "jane@example.com", role = c("aut", "cre"),
comment = c(ORCID = "YOUR-ORCID-ID"))',
License = "MIT + file LICENSE",
Version = "0.0.0.9000"
),
usethis.protocol  = "ssh"
)
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint_package()
lintr:::addin_lint()
use_r("genomic_distances")
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint_package()
lintr:::addin_lint()
load_all()
load_all()
exists("genomic_distance", where = globalenv(), inherits = FALSE)
check()
use_mit_license()
library(roxygen2)
document
document()
?distances
check()
lintr:::addin_lint()
?GenomicRanges::findOverlaps
check()
@importFrom GenomicRanges findOverlaps
devtools:document()
document()
check()
document()
check()
document()
check()
document()
check()
install()
document()
check()
install()
example1 <- read.table("/project/CRUP_scores/Scripts/EPI_v2/example1.txt", sep ="\t")
result <- EPI::distances(example1)
check()
install()
result <- EPI::distances(example1)
print(result)
example2 <- read.table("/project/CRUP_scores/Scripts/EPI_v2/example2.txt", sep ="\t")
result <- EPI::distances(example2)
result <- EPI::distances(example2)
check()
install()
result <- EPI::distances(example2)
check()
install()
result <- EPI::distances(example2)
head(result)
