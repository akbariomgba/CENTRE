###############################################################################
# function: convert factor type columns into character type
###############################################################################
unfactorize <- function(df) {
  for (i in which(sapply(df, class) == "factor")) {
    df[[i]] <- as.character(df[[i]])
  }

  return(df)
}

###############################################################################
# function: get the distance from gene to enhancer
###############################################################################
distances_gene_enhancer <- function(x) {
  x <- unfactorize(x)
  gencode <- unfactorize(gencode)
  x$chr_gene <- gencode[gencode$gene_id %in% x[, 1], 1]
  x$chr_enh <- ccres_enhancer[ccres_enhancer$V5 %in% x[,2],1]
  x$gene_tts <- gencode[gencode$gene_id %in% x[, 1], 10]
  x$enh_middlepoint <- ccres_enhancer[ccres_enhancer$V5 %in% x[, 2], 11]

  for(i in 1:nrow(x)){
    if(x[i,]$chr_gene != x[i,]$chr_enh){
      warning("Gene and enhancer are not in the same chromosome,
            distance will not be computed")
      x <- x[- i,] #what happens if all are in diff chromosomes
    }
  }

  x$distance <- abs(x$enh_middlepoint - x$gene_tts)

  return(x)
}

###############################################################################
# function: extend genes by 50000bp and map the gene region
# to overlapping enhancers
###############################################################################

### this can be done in a much nicer way
map_genes_to_chromosomes <- function(x){
  #get chromosome and tts of our genes
  x$chr_gene <- gencode[gencode$gene_id %in% x[, 1], 1]
  x$gene_tts <- gencode[gencode$gene_id %in% x[, 1], 10]

  #extend start coorditantes of tts
  x$start <- x$gene_tts
  x$start[x$gene_tts <= 50000,] <- 1
  x$start[x$gene_tts > 50000,] <- x$start[ x$gene_tts > 50000,] - 50000

  #extend end coordinates of tts
  x$end <- x$gene_tts
  x$end[x$gene_tts + 50000 > chromosomes[chromosomes[, 1] == x$chr_gene, 2] ,] <- chromosomes[chromosomes[, 1] == x$chr_gene, 2]
  x$end[x$gene_tts > 50000,] <- x$start[x$gene_tts > 50000,] - 50000

  for (i in 1:nrow(x)) {
    tts <- gencode[gencode$gene_id == x[i, 1], 10]
    chr <- gencode[gencode$gene_id == x[i, 1], 1]
    chrs <- c(chrs, chr)
    if (tts <= 50000) {
      start <- c(start, 1)
    } else {
      start <- c(start, tts - 50000)
    }

    if (tts + 50000 > chromosomes[chromosomes[, 1] == chr, 2]) {
      end <- c(end, chromosomes[chromosomes[, 1] == chr, 2])
    } else {
      end <- c(end, tts + 50000)
    }
  }

  genesdata <- as.data.frame(cbind(chr, start, end))
  colnames(genesdata) <- c("seqnames", "start", "end")
  genes_range <- GenomicRanges::makeGRangesFromDataFrame(genesdata)
  GenomicRanges::elementMetadata(genes_range) <- x[, 1]


  enhancerdata <- ccres_enhancer[, c("V1", "V2", "V3")]
  colnames(enhancerdata) <- c("seqnames", "start", "end")
  enhancer_range <- GenomicRanges::makeGRangesFromDataFrame(enhancerdata)


  GenomicRanges::elementMetadata(enhancer_range) <- ccres_enhancer[, "V5"]
  overlaps <- GenomicRanges::findOverlaps(genes_range, enhancer_range,
                                          ignore.strand = T)

  returned_mat <- as.data.frame(cbind(x[overlaps@from, ],
                                      ccres_enhancer[overlaps@to, "V5"]))
  return(returned_mat)


}



distances <- function(x) {
  x <- unfactorize(x)
  gencode <- as.data.frame(gencode)
  ccres_enhancer <- as.data.frame(ccres_enhancer)
  if (ncol(x) == 2) {
    distance_dataframe <- distances_gene_enhancer(x)
    return(distance_dataframe)

  }
  else{

    returned_mat <- map_genes_to_chromosomes(x)
    distance_dataframe <- distances_gene_enhancer(returned_mat)
    return(distance_dataframe)



  }

}
