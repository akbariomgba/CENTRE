
compute_crup_EP_enhancer <- function(input, crupinput, cores){

  normalized <- crupR::normalize(metaData = crupinput, condition = 1, replicate = 1,
                                 genome = "hg38", sequencing = "single",
                                 chroms = c("chr1"), cores = cores) ##how do we deal with the type of sequencing?
  crup_scores <- crupR::getEnhancers(data = normalized, cores = cores)

  crup_scores <- crup_scores$data_matrix

  ccres_enhancer <- as.data.frame(ccres_enhancer)

  regions <- subset(ccres_enhancer, ccres_enhancer$V5 %in% input$V2, select = c(V1,V5,new_start, new_end))

  genes_ranges <- with(regions, GenomicRanges::GRanges(V1, IRanges::IRanges(start=new_start,end=new_end)))

  hits_crup<- GenomicRanges::findOverlaps(genes_ranges,crup_scores)
  cres_EP<-data.frame(cres=hits_crup@from,EP=hits_crup@to)
  cres_EP$cres_name <-ccres_enhancer$V5[cres_EP$cres]
  cres_EP$EP_prob<-GenomicRanges::elementMetadata(crup_scores)$score[cres_EP$EP]
  normilized_score<-aggregate(EP_prob ~ cres_name, cres_EP, sum)
  return(normilized_score)



}


compute_crup_EP_promoter <- function(input, crupinput, cores){

  normalized <- crupR::normalize(metaData = crupinput, condition = 1, replicate = 1,
                                 genome = "hg38", sequencing = "single",
                                 chroms = c("chr1"), cores = cores) ##call normalization outside of function??
  crup_scores <- crupR::getEnhancers(data = normalized, cores = cores)

  crup_scores <- crup_scores$data_matrix

  gencode <- as.data.frame(gencode)

  regions <- subset(gencode, gencode$gene_id %in% input[,1], select = c(chr,gene_id,new_start, new_end))

  genes_ranges <- with(regions, GenomicRanges::GRanges(chr, IRanges::IRanges(start=new_start,end=new_end)))

  hits_crup<- GenomicRanges::findOverlaps(genes_ranges,crup_scores)
  cres_EP<-data.frame(promoter=hits_crup@from,EP=hits_crup@to)
  cres_EP$gene_name <-gencode$gene_id[cres_EP$promoter]
  cres_EP$EP_prob<-GenomicRanges::elementMetadata(crup_scores)$score[cres_EP$EP]
  normilized_score<-aggregate(EP_prob ~ gene_name, cres_EP, sum)

  return(normilized_score)


}

compute_crup_EP_reg_distance <- function(input, enhancer_scores){
  normalized <- crupR::normalize(metaData = crupinput, condition = 1, replicate = 1,
                                 genome = "hg38", sequencing = "single",
                                 chroms = c("chr1"), cores = cores) ##how do we deal with the type of sequencing?
  prediction <- crupR::getEnhancers(data = normalized, cores = cores)
  ccres_enhancer <- unfactorize(ccres_enhancer)
  gencode <- unfactorize(gencode)
  middle_point <- ccres_enhancer[ccres_enhancer$V5 %in% input$V2,]$middle_point
  tts <- gencode[gencode$gene_id %in% input$V1,]$transcription_start

  print(middle_point-tts)

  input$distance <- middle_point-tts
  input$bstart <- middle_point
  input$bstart[input$distance>0]<- tts[input$distance>0]
  input$bend <- tts
  input$bend[input$distance>0]<- middle_point[input$distance>0]


  input$pair<-paste0(input$V1,'_',input$V2)#173509
  input<- input[!(duplicated(input$pair)),]#169049

  between_ranges<-with(input, GRanges(chr, IRanges(start=bstart,end=bend)))
  hits_enh<-findOverlaps(between_ranges,prediction)
  cres_EP<-data.frame(between=hits_enh@from,EP_prob=elementMetadata(prediction)$prob[hits_enh@to])
  normilized_score<-aggregate(EP_prob ~ between, cres_EP, mean)
  bins<-as.data.frame(table(cres_EP$between))
  return(bins)


}

compute_crup_PP_enhancer <- function(input, crupinput, cores){

  normalized <- crupR::normalize(metaData = crupinput, condition = 1, replicate = 1,
                                 genome = "hg38", sequencing = "single",
                                 chroms = c("chr1"), cores = cores) ##how do we deal with the type of sequencing?
  crup_scores <- crupR::getEnhancers(data = normalized, cores = cores, promprob = T)

  crup_scores <- crup_scores$data_matrix

  ccres_enhancer <- as.data.frame(ccres_enhancer)

  regions <- subset(ccres_enhancer, ccres_enhancer$V5 %in% input$V2, select = c(V1,V5,new_start, new_end))

  genes_ranges <- with(regions, GenomicRanges::GRanges(V1, IRanges::IRanges(start=new_start,end=new_end)))

  hits_crup<- GenomicRanges::findOverlaps(genes_ranges,crup_scores)
  cres_EP<-data.frame(cres=hits_crup@from,EP=hits_crup@to)
  cres_EP$cres_name <-ccres_enhancer$V5[cres_EP$cres]
  cres_EP$EP_prob<-GenomicRanges::elementMetadata(crup_scores)$score[cres_EP$EP]
  normilized_score<-aggregate(EP_prob ~ cres_name, cres_EP, sum)

  return(normilized_score)



}


compute_crup_PP_promoter <- function(input, crupinput, cores){

  normalized <- crupR::normalize(metaData = crupinput, condition = 1, replicate = 1,
                                 genome = "hg38", sequencing = "single",
                                 chroms = c("chr1"), cores = cores) ##call normalization outside of function??
  crup_scores <- crupR::getEnhancers(data = normalized, cores = cores, promprob = T)

  crup_scores <- crup_scores$data_matrix

  gencode <- as.data.frame(gencode)

  regions <- subset(gencode, gencode$gene_id %in% input[,1], select = c(chr,gene_id,new_start, new_end))

  genes_ranges <- with(regions, GenomicRanges::GRanges(chr, IRanges::IRanges(start=new_start,end=new_end)))

  hits_crup<- GenomicRanges::findOverlaps(genes_ranges,crup_scores)
  cres_EP<-data.frame(promoter=hits_crup@from,EP=hits_crup@to)
  cres_EP$gene_name <-gencode$gene_id[cres_EP$promoter]
  cres_EP$EP_prob<-GenomicRanges::elementMetadata(crup_scores)$score[cres_EP$EP]
  normilized_score<-aggregate(EP_prob ~ gene_name, cres_EP, sum)

  return(normilized_score)


}


compute_crup_PP_reg_distance <- function(input, crupinput, cores, chr){
  normalized <- crupR::normalize(metaData = crupinput, condition = 1, replicate = 1,
                                 genome = "hg38", sequencing = "single",
                                 chroms = c("chr1"), cores = cores) ##how do we deal with the type of sequencing?
  prediction <- crupR::getEnhancers(data = normalized, cores = cores, promprob = T)
  ccres_enhancer <- unfactorize(ccres_enhancer)
  gencode <- unfactorize(gencode)
  middle_point <- ccres_enhancer[ccres_enhancer$V5 %in% input$V2,]$middle_point
  tts <- gencode[gencode$gene_id %in% input$V1,]$transcription_start

  print(middle_point-tts)

  input$distance <- middle_point-tts
  input$bstart <- middle_point
  input$bstart[input$distance>0]<- tts[input$distance>0]
  input$bend <- tts
  input$bend[input$distance>0]<- middle_point[input$distance>0]


  input$pair<-paste0(input$V1,'_',input$V2)#173509
  input<- input[!(duplicated(input$pair)),]#169049

  between_ranges<-with(input, GRanges(chr, IRanges(start=bstart,end=bend)))
  hits_enh<-findOverlaps(between_ranges,prediction)
  cres_EP<-data.frame(between=hits_enh@from,EP_prob=elementMetadata(prediction)$prob[hits_enh@to])
  normilized_score<-aggregate(EP_prob ~ between, cres_EP, mean)
  bins<-as.data.frame(table(cres_EP$between))
  return(bins)



}
